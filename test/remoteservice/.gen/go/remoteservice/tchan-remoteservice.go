// @generated Code generated by thrift-gen. Do not modify.

// Package remoteservice is generated code used to make or handle TChannel calls using Thrift.
package remoteservice

import (
	"fmt"

	athrift "github.com/apache/thrift/lib/go/thrift"
	"github.com/uber/tchannel-go/thrift"

	"github.com/uber/ringpop-go/test/remoteservice/.gen/go/shared"

	"github.com/uber/ringpop-go/test/remoteservice/.gen/go/unused"
)

var _ = shared.GoUnusedProtection__

var _ = unused.GoUnusedProtection__

// Interfaces for the service and client for the services defined in the IDL.

// TChanRemoteService is the interface that defines the server handler and client interface.
type TChanRemoteService interface {
	RemoteCall(ctx thrift.Context, name shared.Name) error
}

// Implementation of a client and service handler.

type tchanRemoteServiceClient struct {
	thriftService string
	client        thrift.TChanClient
}

func NewTChanRemoteServiceInheritedClient(thriftService string, client thrift.TChanClient) *tchanRemoteServiceClient {
	return &tchanRemoteServiceClient{
		thriftService,
		client,
	}
}

// NewTChanRemoteServiceClient creates a client that can be used to make remote calls.
func NewTChanRemoteServiceClient(client thrift.TChanClient) TChanRemoteService {
	return NewTChanRemoteServiceInheritedClient("RemoteService", client)
}

func (c *tchanRemoteServiceClient) RemoteCall(ctx thrift.Context, name shared.Name) error {
	var resp RemoteServiceRemoteCallResult
	args := RemoteServiceRemoteCallArgs{
		Name: name,
	}
	success, err := c.client.Call(ctx, c.thriftService, "RemoteCall", &args, &resp)
	if err == nil && !success {
		switch {
		default:
			err = fmt.Errorf("received no result or unknown exception for RemoteCall")
		}
	}

	return err
}

type tchanRemoteServiceServer struct {
	handler TChanRemoteService
}

// NewTChanRemoteServiceServer wraps a handler for TChanRemoteService so it can be
// registered with a thrift.Server.
func NewTChanRemoteServiceServer(handler TChanRemoteService) thrift.TChanServer {
	return &tchanRemoteServiceServer{
		handler,
	}
}

func (s *tchanRemoteServiceServer) Service() string {
	return "RemoteService"
}

func (s *tchanRemoteServiceServer) Methods() []string {
	return []string{
		"RemoteCall",
	}
}

func (s *tchanRemoteServiceServer) Handle(ctx thrift.Context, methodName string, protocol athrift.TProtocol) (bool, athrift.TStruct, error) {
	switch methodName {
	case "RemoteCall":
		return s.handleRemoteCall(ctx, protocol)

	default:
		return false, nil, fmt.Errorf("method %v not found in service %v", methodName, s.Service())
	}
}

func (s *tchanRemoteServiceServer) handleRemoteCall(ctx thrift.Context, protocol athrift.TProtocol) (bool, athrift.TStruct, error) {
	var req RemoteServiceRemoteCallArgs
	var res RemoteServiceRemoteCallResult

	if err := req.Read(protocol); err != nil {
		return false, nil, err
	}

	err :=
		s.handler.RemoteCall(ctx, req.Name)

	if err != nil {
		return false, nil, err
	} else {
	}

	return err == nil, &res, nil
}
